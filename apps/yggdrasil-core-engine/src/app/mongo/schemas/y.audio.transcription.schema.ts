import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';
import * as mongoose from 'mongoose';
import { PartCreateTranscriptionResponse } from '../../chatgpt/interface/create.completion.response.usage.for.rpc.interface';

export type YAudioTranscriptionDocument = HydratedDocument<YAudioTranscription>;

@Schema({
  timestamps: true,
  autoCreate: true,
})
export class YAudioTranscription {
  // id is not required because it is auto-generated by MongoDB
  @Prop()
  id?: mongoose.Schema.Types.ObjectId;

  // file fingerprint as unique id and file name
  // use sha256
  @Prop({
    type: String,
    required: true,
    unique: true,
  })
  fingerprint: string;

  // source file url, as google cloud storage
  @Prop({
    type: String,
    required: true,
    unique: true,
  })
  url: string;

  // file extension, like m4a, mp3, wav, etc.
  @Prop({
    type: String,
    required: true,
  })
  extension: string;

  // from openai transcription api
  @Prop({
    type: Array<PartCreateTranscriptionResponse>,
    required: true,
  })
  data: PartCreateTranscriptionResponse[];

  // created At
  @Prop()
  createdAt: Date;

  // updated At
  @Prop()
  updatedAt: Date;
}

export const YAudioTranscriptionSchema =
  SchemaFactory.createForClass(YAudioTranscription);
