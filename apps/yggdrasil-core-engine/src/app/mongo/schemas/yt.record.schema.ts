import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';
import * as mongoose from 'mongoose';
import { PartCreateChatCompletionResponse } from '../../chatgpt/interface/create.completion.response.usage.for.rpc.interface';

export type YTRecordDocument = HydratedDocument<YTRecord>;

@Schema({
  timestamps: true,
  autoCreate: true,
})
export class YTRecord {
  // id is not required because it is auto-generated by MongoDB
  @Prop()
  id?: mongoose.Schema.Types.ObjectId;

  // yt id
  @Prop({
    type: String,
    required: true,
    unique: true,
  })
  ytId: string;

  // source youtube video url
  @Prop({
    type: String,
    required: true,
    unique: true,
  })
  url: string;

  // title
  @Prop({
    type: String,
    required: true,
  })
  title: string;

  // channel
  @Prop({
    type: String,
    required: true,
  })
  channel: string;

  // channel id
  @Prop({
    type: String,
    required: true,
  })
  channelId: string;

  // channel url
  @Prop({
    type: String,
    required: true,
  })
  channelUrl: string;

  // duration
  @Prop({
    type: Number,
    required: true,
  })
  duration: number;

  // content text
  @Prop({
    type: Array<PartCreateChatCompletionResponse>,
    required: true,
  })
  response: PartCreateChatCompletionResponse[];

  // created At
  @Prop()
  createdAt: Date;

  // updated At
  @Prop()
  updatedAt: Date;
}

export const YTRecordSchema = SchemaFactory.createForClass(YTRecord);
